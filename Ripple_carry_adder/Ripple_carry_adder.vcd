$date
	Sat Jul 13 13:29:16 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module RCA_TB $end
$var wire 1 ! Cout $end
$var wire 4 " S [3:0] $end
$var wire 5 # add [4:0] $end
$var reg 4 $ A [3:0] $end
$var reg 4 % B [3:0] $end
$var reg 1 & Cin $end
$scope module rca $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 ) Cin $end
$var wire 1 ! Cout $end
$var wire 4 * S [3:0] $end
$var wire 5 + carry [4:0] $end
$scope begin adder[0] $end
$scope module fa $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . cin $end
$var wire 1 / cout $end
$var wire 1 0 sum $end
$upscope $end
$upscope $end
$scope begin adder[1] $end
$scope module fa $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$scope begin adder[2] $end
$scope module fa $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$scope begin adder[3] $end
$scope module fa $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 = cin $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
10
0/
0.
0-
1,
b0 +
b1 *
0)
b0 (
b1 '
0&
b0 %
b1 $
b1 #
b1 "
0!
$end
#3000
1:
15
b111 "
b111 *
b111 #
1.
17
0,
11
1&
b1 +
1)
b100 %
b100 (
b10 $
b10 '
#6000
1!
1>
1=
19
0:
18
14
05
0?
b1 "
b1 *
b10001 #
0.
12
1,
1;
0&
b11100 +
0)
b110 %
b110 (
b1011 $
b1011 '
#9000
1=
19
0:
18
13
14
0!
1/
05
0>
1?
b1001 "
b1001 *
b1001 #
1.
1-
07
01
16
0;
1&
b1111 +
1)
b11 %
b11 (
b101 $
b101 '
#12000
